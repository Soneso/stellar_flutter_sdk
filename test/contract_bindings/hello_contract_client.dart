// This file was generated by stellar_contract_bindings v0.5.0b0 and stellar_sdk v13.0.0.

import 'dart:typed_data';
import 'package:stellar_flutter_sdk/stellar_flutter_sdk.dart';

/// Client for interacting with the HelloContract contract
class HelloContract {
  /// The underlying SorobanClient instance
  final SorobanClient _client;

  /// Creates a new HelloContract for the given contract ID
  static Future<HelloContract> forContractId({
    required KeyPair sourceAccountKeyPair,
    required String contractId,
    required Network network,
    required String rpcUrl,
    bool enableServerLogging = false,
  }) async {
    final options = ClientOptions(
      sourceAccountKeyPair: sourceAccountKeyPair,
      contractId: contractId,
      network: network,
      rpcUrl: rpcUrl,
      enableServerLogging: enableServerLogging,
    );
    
    final client = await SorobanClient.forClientOptions(options: options);
    return HelloContract._(client);
  }
  
  /// Private constructor that wraps a SorobanClient
  HelloContract._(this._client);

  /// Gets the contract ID
  String getContractId() => _client.getContractId();

  /// Gets the client options
  ClientOptions getOptions() => _client.getOptions();

  /// Gets the contract specification
  ContractSpec getContractSpec() => _client.getContractSpec();
  
  /// Invokes the hello method
  Future<List<String>> hello({
    required String to,
    KeyPair? signer,
    int baseFee = 100,
    int transactionTimeout = 300,
    int submitTimeout = 30,
    bool simulate = true,
    bool restore = true,
    bool force = false,
  }) async {
    final List<XdrSCVal> args = [
      XdrSCVal.forSymbol(to),
    ];
    
    final methodOptions = MethodOptions();
    // You can customize method options here if needed
    
    final result = await _client.invokeMethod(
      name: 'hello',
      args: args,
      force: force,
      methodOptions: methodOptions,
    );
    return result.vec!.map((e) => e.sym!.toString()).toList();
  }
  
  /// Builds an AssembledTransaction for the hello method.
  /// This is useful if you need to manipulate the transaction before signing and sending.
  Future<AssembledTransaction> buildHelloTx({
    required String to,
    MethodOptions? methodOptions,
  }) async {
    final List<XdrSCVal> args = [
      XdrSCVal.forSymbol(to),
    ];
    
    return await _client.buildInvokeMethodTx(
      name: 'hello',
      args: args,
      methodOptions: methodOptions,
    );
  }
}